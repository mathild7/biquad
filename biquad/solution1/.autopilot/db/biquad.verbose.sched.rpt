

================================================================
== Vivado HLS Report for 'biquad'
================================================================
* Date:           Tue Apr 23 23:39:11 2019

* Version:        2017.2 (Build 1909853 on Thu Jun 15 18:55:24 MDT 2017)
* Project:        biquad
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z100ffg900-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      7.26|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    1|   25|    2|   26|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 26
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / (!user_writing_V_read)
	26  / (user_writing_V_read)
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
* FSM state operations: 

 <State 1>: 1.00ns
ST_1: StgValue_27 (13)  [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(float* %in_V), !map !45

ST_1: StgValue_28 (14)  [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(float* %out_V), !map !49

ST_1: StgValue_29 (15)  [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(float %a1), !map !53

ST_1: StgValue_30 (16)  [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(float %a2), !map !59

ST_1: StgValue_31 (17)  [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap(float %b0), !map !63

ST_1: StgValue_32 (18)  [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap(float %b1), !map !67

ST_1: StgValue_33 (19)  [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecBitsMap(float %b2), !map !71

ST_1: StgValue_34 (20)  [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecBitsMap(i1 %user_writing_V), !map !75

ST_1: StgValue_35 (21)  [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @biquad_str) nounwind

ST_1: user_writing_V_read (22)  [1/1] 1.00ns
:9  %user_writing_V_read = call i1 @_ssdm_op_Read.s_axilite.i1(i1 %user_writing_V)

ST_1: b2_read (23)  [1/1] 1.00ns
:10  %b2_read = call float @_ssdm_op_Read.s_axilite.float(float %b2)

ST_1: b1_read (24)  [1/1] 1.00ns
:11  %b1_read = call float @_ssdm_op_Read.s_axilite.float(float %b1)

ST_1: b0_read (25)  [1/1] 1.00ns
:12  %b0_read = call float @_ssdm_op_Read.s_axilite.float(float %b0)

ST_1: a2_read (26)  [1/1] 1.00ns
:13  %a2_read = call float @_ssdm_op_Read.s_axilite.float(float %a2)

ST_1: a1_read (27)  [1/1] 1.00ns
:14  %a1_read = call float @_ssdm_op_Read.s_axilite.float(float %a1)

ST_1: StgValue_42 (28)  [1/1] 0.00ns  loc: biquad.cpp:19
:15  call void (...)* @_ssdm_op_SpecInterface(i1 %user_writing_V, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [9 x i8]* @p_str2, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_43 (29)  [1/1] 0.00ns  loc: biquad.cpp:20
:16  call void (...)* @_ssdm_op_SpecInterface(float %b2, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [9 x i8]* @p_str2, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_44 (30)  [1/1] 0.00ns  loc: biquad.cpp:21
:17  call void (...)* @_ssdm_op_SpecInterface(float %b1, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [9 x i8]* @p_str2, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_45 (31)  [1/1] 0.00ns  loc: biquad.cpp:22
:18  call void (...)* @_ssdm_op_SpecInterface(float %b0, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [9 x i8]* @p_str2, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_46 (32)  [1/1] 0.00ns  loc: biquad.cpp:23
:19  call void (...)* @_ssdm_op_SpecInterface(float %a2, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [9 x i8]* @p_str2, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_47 (33)  [1/1] 0.00ns  loc: biquad.cpp:24
:20  call void (...)* @_ssdm_op_SpecInterface(float %a1, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [9 x i8]* @p_str2, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_48 (34)  [1/1] 0.00ns  loc: biquad.cpp:25
:21  call void (...)* @_ssdm_op_SpecInterface(float* %out_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_49 (35)  [1/1] 0.00ns  loc: biquad.cpp:26
:22  call void (...)* @_ssdm_op_SpecInterface(float* %in_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_50 (36)  [1/1] 0.00ns  loc: biquad.cpp:27
:23  call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: StgValue_51 (37)  [1/1] 0.00ns  loc: biquad.cpp:29
:24  br i1 %user_writing_V_read, label %._crit_edge, label %1

ST_1: tmp_4 (39)  [2/2] 0.00ns  loc: biquad.cpp:37
:0  %tmp_4 = call float @_ssdm_op_Read.axis.volatile.floatP(float* %in_V)


 <State 2>: 5.70ns
ST_2: tmp_4 (39)  [1/2] 0.00ns  loc: biquad.cpp:37
:0  %tmp_4 = call float @_ssdm_op_Read.axis.volatile.floatP(float* %in_V)

ST_2: tmp_6 (40)  [4/4] 5.70ns  loc: biquad.cpp:39
:1  %tmp_6 = fmul float %tmp_4, %b0_read

ST_2: x1_load (41)  [1/1] 0.00ns  loc: biquad.cpp:39
:2  %x1_load = load float* @x1, align 4

ST_2: tmp_7 (42)  [4/4] 5.70ns  loc: biquad.cpp:39
:3  %tmp_7 = fmul float %x1_load, %b1_read

ST_2: x2_load (44)  [1/1] 0.00ns  loc: biquad.cpp:39
:5  %x2_load = load float* @x2, align 4

ST_2: tmp_9 (45)  [4/4] 5.70ns  loc: biquad.cpp:39
:6  %tmp_9 = fmul float %x2_load, %b2_read

ST_2: StgValue_59 (55)  [1/1] 0.00ns  loc: biquad.cpp:43
:16  store float %x1_load, float* @x2, align 4

ST_2: StgValue_60 (56)  [1/1] 0.00ns  loc: biquad.cpp:44
:17  store float %tmp_4, float* @x1, align 4


 <State 3>: 5.70ns
ST_3: tmp_6 (40)  [3/4] 5.70ns  loc: biquad.cpp:39
:1  %tmp_6 = fmul float %tmp_4, %b0_read

ST_3: tmp_7 (42)  [3/4] 5.70ns  loc: biquad.cpp:39
:3  %tmp_7 = fmul float %x1_load, %b1_read

ST_3: tmp_9 (45)  [3/4] 5.70ns  loc: biquad.cpp:39
:6  %tmp_9 = fmul float %x2_load, %b2_read


 <State 4>: 5.70ns
ST_4: tmp_6 (40)  [2/4] 5.70ns  loc: biquad.cpp:39
:1  %tmp_6 = fmul float %tmp_4, %b0_read

ST_4: tmp_7 (42)  [2/4] 5.70ns  loc: biquad.cpp:39
:3  %tmp_7 = fmul float %x1_load, %b1_read

ST_4: tmp_9 (45)  [2/4] 5.70ns  loc: biquad.cpp:39
:6  %tmp_9 = fmul float %x2_load, %b2_read


 <State 5>: 5.70ns
ST_5: tmp_6 (40)  [1/4] 5.70ns  loc: biquad.cpp:39
:1  %tmp_6 = fmul float %tmp_4, %b0_read

ST_5: tmp_7 (42)  [1/4] 5.70ns  loc: biquad.cpp:39
:3  %tmp_7 = fmul float %x1_load, %b1_read

ST_5: tmp_9 (45)  [1/4] 5.70ns  loc: biquad.cpp:39
:6  %tmp_9 = fmul float %x2_load, %b2_read


 <State 6>: 7.26ns
ST_6: tmp_8 (43)  [5/5] 7.26ns  loc: biquad.cpp:39
:4  %tmp_8 = fadd float %tmp_6, %tmp_7


 <State 7>: 7.26ns
ST_7: tmp_8 (43)  [4/5] 7.26ns  loc: biquad.cpp:39
:4  %tmp_8 = fadd float %tmp_6, %tmp_7


 <State 8>: 7.26ns
ST_8: tmp_8 (43)  [3/5] 7.26ns  loc: biquad.cpp:39
:4  %tmp_8 = fadd float %tmp_6, %tmp_7


 <State 9>: 7.26ns
ST_9: tmp_8 (43)  [2/5] 7.26ns  loc: biquad.cpp:39
:4  %tmp_8 = fadd float %tmp_6, %tmp_7


 <State 10>: 7.26ns
ST_10: tmp_8 (43)  [1/5] 7.26ns  loc: biquad.cpp:39
:4  %tmp_8 = fadd float %tmp_6, %tmp_7


 <State 11>: 7.26ns
ST_11: tmp_s (46)  [5/5] 7.26ns  loc: biquad.cpp:39
:7  %tmp_s = fadd float %tmp_8, %tmp_9


 <State 12>: 7.26ns
ST_12: tmp_s (46)  [4/5] 7.26ns  loc: biquad.cpp:39
:7  %tmp_s = fadd float %tmp_8, %tmp_9

ST_12: y1_load (47)  [1/1] 0.00ns  loc: biquad.cpp:39
:8  %y1_load = load float* @y1, align 4

ST_12: tmp_1 (48)  [4/4] 5.70ns  loc: biquad.cpp:39
:9  %tmp_1 = fmul float %y1_load, %a1_read

ST_12: y2_load (50)  [1/1] 0.00ns  loc: biquad.cpp:39
:11  %y2_load = load float* @y2, align 4

ST_12: tmp_3 (51)  [4/4] 5.70ns  loc: biquad.cpp:39
:12  %tmp_3 = fmul float %y2_load, %a2_read

ST_12: StgValue_81 (53)  [1/1] 0.00ns  loc: biquad.cpp:41
:14  store float %y1_load, float* @y2, align 4


 <State 13>: 7.26ns
ST_13: tmp_s (46)  [3/5] 7.26ns  loc: biquad.cpp:39
:7  %tmp_s = fadd float %tmp_8, %tmp_9

ST_13: tmp_1 (48)  [3/4] 5.70ns  loc: biquad.cpp:39
:9  %tmp_1 = fmul float %y1_load, %a1_read

ST_13: tmp_3 (51)  [3/4] 5.70ns  loc: biquad.cpp:39
:12  %tmp_3 = fmul float %y2_load, %a2_read


 <State 14>: 7.26ns
ST_14: tmp_s (46)  [2/5] 7.26ns  loc: biquad.cpp:39
:7  %tmp_s = fadd float %tmp_8, %tmp_9

ST_14: tmp_1 (48)  [2/4] 5.70ns  loc: biquad.cpp:39
:9  %tmp_1 = fmul float %y1_load, %a1_read

ST_14: tmp_3 (51)  [2/4] 5.70ns  loc: biquad.cpp:39
:12  %tmp_3 = fmul float %y2_load, %a2_read


 <State 15>: 7.26ns
ST_15: tmp_s (46)  [1/5] 7.26ns  loc: biquad.cpp:39
:7  %tmp_s = fadd float %tmp_8, %tmp_9

ST_15: tmp_1 (48)  [1/4] 5.70ns  loc: biquad.cpp:39
:9  %tmp_1 = fmul float %y1_load, %a1_read

ST_15: tmp_3 (51)  [1/4] 5.70ns  loc: biquad.cpp:39
:12  %tmp_3 = fmul float %y2_load, %a2_read


 <State 16>: 7.26ns
ST_16: tmp_2 (49)  [5/5] 7.26ns  loc: biquad.cpp:39
:10  %tmp_2 = fsub float %tmp_s, %tmp_1


 <State 17>: 7.26ns
ST_17: tmp_2 (49)  [4/5] 7.26ns  loc: biquad.cpp:39
:10  %tmp_2 = fsub float %tmp_s, %tmp_1


 <State 18>: 7.26ns
ST_18: tmp_2 (49)  [3/5] 7.26ns  loc: biquad.cpp:39
:10  %tmp_2 = fsub float %tmp_s, %tmp_1


 <State 19>: 7.26ns
ST_19: tmp_2 (49)  [2/5] 7.26ns  loc: biquad.cpp:39
:10  %tmp_2 = fsub float %tmp_s, %tmp_1


 <State 20>: 7.26ns
ST_20: tmp_2 (49)  [1/5] 7.26ns  loc: biquad.cpp:39
:10  %tmp_2 = fsub float %tmp_s, %tmp_1


 <State 21>: 7.26ns
ST_21: output (52)  [5/5] 7.26ns  loc: biquad.cpp:39
:13  %output = fsub float %tmp_2, %tmp_3


 <State 22>: 7.26ns
ST_22: output (52)  [4/5] 7.26ns  loc: biquad.cpp:39
:13  %output = fsub float %tmp_2, %tmp_3


 <State 23>: 7.26ns
ST_23: output (52)  [3/5] 7.26ns  loc: biquad.cpp:39
:13  %output = fsub float %tmp_2, %tmp_3


 <State 24>: 7.26ns
ST_24: output (52)  [2/5] 7.26ns  loc: biquad.cpp:39
:13  %output = fsub float %tmp_2, %tmp_3


 <State 25>: 7.26ns
ST_25: output (52)  [1/5] 7.26ns  loc: biquad.cpp:39
:13  %output = fsub float %tmp_2, %tmp_3

ST_25: StgValue_101 (54)  [1/1] 0.00ns  loc: biquad.cpp:42
:15  store float %output, float* @y1, align 4

ST_25: StgValue_102 (57)  [2/2] 0.00ns  loc: biquad.cpp:46
:18  call void @_ssdm_op_Write.axis.volatile.floatP(float* %out_V, float %output)


 <State 26>: 0.00ns
ST_26: StgValue_103 (57)  [1/2] 0.00ns  loc: biquad.cpp:46
:18  call void @_ssdm_op_Write.axis.volatile.floatP(float* %out_V, float %output)

ST_26: StgValue_104 (58)  [1/1] 0.00ns  loc: biquad.cpp:47
:19  br label %._crit_edge

ST_26: StgValue_105 (60)  [1/1] 0.00ns  loc: biquad.cpp:47
._crit_edge:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1ns
The critical path consists of the following:
	s_axi read on port 'user_writing_V' [22]  (1 ns)

 <State 2>: 5.7ns
The critical path consists of the following:
	axis read on port 'in_V' (biquad.cpp:37) [39]  (0 ns)
	'fmul' operation ('tmp_6', biquad.cpp:39) [40]  (5.7 ns)

 <State 3>: 5.7ns
The critical path consists of the following:
	'fmul' operation ('tmp_6', biquad.cpp:39) [40]  (5.7 ns)

 <State 4>: 5.7ns
The critical path consists of the following:
	'fmul' operation ('tmp_6', biquad.cpp:39) [40]  (5.7 ns)

 <State 5>: 5.7ns
The critical path consists of the following:
	'fmul' operation ('tmp_6', biquad.cpp:39) [40]  (5.7 ns)

 <State 6>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_8', biquad.cpp:39) [43]  (7.26 ns)

 <State 7>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_8', biquad.cpp:39) [43]  (7.26 ns)

 <State 8>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_8', biquad.cpp:39) [43]  (7.26 ns)

 <State 9>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_8', biquad.cpp:39) [43]  (7.26 ns)

 <State 10>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_8', biquad.cpp:39) [43]  (7.26 ns)

 <State 11>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_s', biquad.cpp:39) [46]  (7.26 ns)

 <State 12>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_s', biquad.cpp:39) [46]  (7.26 ns)

 <State 13>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_s', biquad.cpp:39) [46]  (7.26 ns)

 <State 14>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_s', biquad.cpp:39) [46]  (7.26 ns)

 <State 15>: 7.26ns
The critical path consists of the following:
	'fadd' operation ('tmp_s', biquad.cpp:39) [46]  (7.26 ns)

 <State 16>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('tmp_2', biquad.cpp:39) [49]  (7.26 ns)

 <State 17>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('tmp_2', biquad.cpp:39) [49]  (7.26 ns)

 <State 18>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('tmp_2', biquad.cpp:39) [49]  (7.26 ns)

 <State 19>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('tmp_2', biquad.cpp:39) [49]  (7.26 ns)

 <State 20>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('tmp_2', biquad.cpp:39) [49]  (7.26 ns)

 <State 21>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('output', biquad.cpp:39) [52]  (7.26 ns)

 <State 22>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('output', biquad.cpp:39) [52]  (7.26 ns)

 <State 23>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('output', biquad.cpp:39) [52]  (7.26 ns)

 <State 24>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('output', biquad.cpp:39) [52]  (7.26 ns)

 <State 25>: 7.26ns
The critical path consists of the following:
	'fsub' operation ('output', biquad.cpp:39) [52]  (7.26 ns)

 <State 26>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
