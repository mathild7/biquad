// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "biquad.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic biquad::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic biquad::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<26> biquad::ap_ST_fsm_state1 = "1";
const sc_lv<26> biquad::ap_ST_fsm_state2 = "10";
const sc_lv<26> biquad::ap_ST_fsm_state3 = "100";
const sc_lv<26> biquad::ap_ST_fsm_state4 = "1000";
const sc_lv<26> biquad::ap_ST_fsm_state5 = "10000";
const sc_lv<26> biquad::ap_ST_fsm_state6 = "100000";
const sc_lv<26> biquad::ap_ST_fsm_state7 = "1000000";
const sc_lv<26> biquad::ap_ST_fsm_state8 = "10000000";
const sc_lv<26> biquad::ap_ST_fsm_state9 = "100000000";
const sc_lv<26> biquad::ap_ST_fsm_state10 = "1000000000";
const sc_lv<26> biquad::ap_ST_fsm_state11 = "10000000000";
const sc_lv<26> biquad::ap_ST_fsm_state12 = "100000000000";
const sc_lv<26> biquad::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<26> biquad::ap_ST_fsm_state26 = "10000000000000000000000000";
const bool biquad::ap_const_boolean_1 = true;
const sc_lv<1> biquad::ap_const_lv1_0 = "0";
const sc_lv<1> biquad::ap_const_lv1_1 = "1";
const sc_lv<2> biquad::ap_const_lv2_0 = "00";
const sc_lv<2> biquad::ap_const_lv2_2 = "10";
const sc_lv<2> biquad::ap_const_lv2_3 = "11";
const sc_lv<2> biquad::ap_const_lv2_1 = "1";
const sc_lv<32> biquad::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> biquad::ap_const_lv32_1 = "1";
const sc_lv<32> biquad::ap_const_lv32_18 = "11000";
const sc_lv<32> biquad::ap_const_lv32_19 = "11001";
const int biquad::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> biquad::ap_const_lv32_4 = "100";
const sc_lv<32> biquad::ap_const_lv32_E = "1110";
const sc_lv<32> biquad::ap_const_lv32_9 = "1001";
const sc_lv<32> biquad::ap_const_lv32_13 = "10011";
const sc_lv<32> biquad::ap_const_lv32_B = "1011";
const sc_lv<32> biquad::ap_const_lv32_5 = "101";
const sc_lv<32> biquad::ap_const_lv32_A = "1010";
const sc_lv<32> biquad::ap_const_lv32_F = "1111";
const sc_lv<32> biquad::ap_const_lv32_14 = "10100";
const sc_lv<32> biquad::ap_const_lv32_C = "1100";
const sc_lv<32> biquad::ap_const_lv32_D = "1101";
const sc_lv<32> biquad::ap_const_lv32_2 = "10";
const sc_lv<32> biquad::ap_const_lv32_3 = "11";

biquad::biquad(sc_module_name name) : sc_module(name), mVcdFile(0) {
    biquad_CTRL_BUS_s_axi_U = new biquad_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("biquad_CTRL_BUS_s_axi_U");
    biquad_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    biquad_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    biquad_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    biquad_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    biquad_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    biquad_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    biquad_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    biquad_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    biquad_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    biquad_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    biquad_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    biquad_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    biquad_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    biquad_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    biquad_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    biquad_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    biquad_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    biquad_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    biquad_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    biquad_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    biquad_CTRL_BUS_s_axi_U->a1(a1);
    biquad_CTRL_BUS_s_axi_U->a2(a2);
    biquad_CTRL_BUS_s_axi_U->b0(b0);
    biquad_CTRL_BUS_s_axi_U->b1(b1);
    biquad_CTRL_BUS_s_axi_U->b2(b2);
    biquad_CTRL_BUS_s_axi_U->user_writing_V(user_writing_V);
    biquad_faddfsub_3bkb_U1 = new biquad_faddfsub_3bkb<1,5,32,32,32>("biquad_faddfsub_3bkb_U1");
    biquad_faddfsub_3bkb_U1->clk(ap_clk);
    biquad_faddfsub_3bkb_U1->reset(ap_rst_n_inv);
    biquad_faddfsub_3bkb_U1->din0(grp_fu_105_p0);
    biquad_faddfsub_3bkb_U1->din1(grp_fu_105_p1);
    biquad_faddfsub_3bkb_U1->opcode(grp_fu_105_opcode);
    biquad_faddfsub_3bkb_U1->ce(grp_fu_105_ce);
    biquad_faddfsub_3bkb_U1->dout(grp_fu_105_p2);
    biquad_fmul_32ns_cud_U2 = new biquad_fmul_32ns_cud<1,4,32,32,32>("biquad_fmul_32ns_cud_U2");
    biquad_fmul_32ns_cud_U2->clk(ap_clk);
    biquad_fmul_32ns_cud_U2->reset(ap_rst_n_inv);
    biquad_fmul_32ns_cud_U2->din0(grp_fu_110_p0);
    biquad_fmul_32ns_cud_U2->din1(grp_fu_110_p1);
    biquad_fmul_32ns_cud_U2->ce(grp_fu_110_ce);
    biquad_fmul_32ns_cud_U2->dout(grp_fu_110_p2);
    biquad_fmul_32ns_cud_U3 = new biquad_fmul_32ns_cud<1,4,32,32,32>("biquad_fmul_32ns_cud_U3");
    biquad_fmul_32ns_cud_U3->clk(ap_clk);
    biquad_fmul_32ns_cud_U3->reset(ap_rst_n_inv);
    biquad_fmul_32ns_cud_U3->din0(grp_fu_115_p0);
    biquad_fmul_32ns_cud_U3->din1(grp_fu_115_p1);
    biquad_fmul_32ns_cud_U3->ce(grp_fu_115_ce);
    biquad_fmul_32ns_cud_U3->dout(grp_fu_115_p2);
    biquad_fmul_32ns_cud_U4 = new biquad_fmul_32ns_cud<1,4,32,32,32>("biquad_fmul_32ns_cud_U4");
    biquad_fmul_32ns_cud_U4->clk(ap_clk);
    biquad_fmul_32ns_cud_U4->reset(ap_rst_n_inv);
    biquad_fmul_32ns_cud_U4->din0(x2);
    biquad_fmul_32ns_cud_U4->din1(b2_read_reg_188);
    biquad_fmul_32ns_cud_U4->ce(grp_fu_119_ce);
    biquad_fmul_32ns_cud_U4->dout(grp_fu_119_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state26_io);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( user_writing_V_read_reg_184 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_105_ce);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_105_opcode);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_grp_fu_105_p0);
    sensitive << ( reg_123 );
    sensitive << ( reg_134 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_grp_fu_105_p1);
    sensitive << ( reg_123 );
    sensitive << ( reg_129 );
    sensitive << ( tmp_9_reg_228 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_grp_fu_110_ce);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_110_p0);
    sensitive << ( in_V_0_data_out );
    sensitive << ( y1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_grp_fu_110_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( b0_read_reg_198 );
    sensitive << ( a1_read_reg_208 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_grp_fu_115_ce);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_115_p0);
    sensitive << ( x1 );
    sensitive << ( y2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_grp_fu_115_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( b1_read_reg_193 );
    sensitive << ( a2_read_reg_203 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_grp_fu_119_ce);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_V_0_ack_in);
    sensitive << ( in_V_0_state );

    SC_METHOD(thread_in_V_0_ack_out);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_V_0_data_out);
    sensitive << ( in_V_0_payload_A );
    sensitive << ( in_V_0_payload_B );
    sensitive << ( in_V_0_sel );

    SC_METHOD(thread_in_V_0_load_A);
    sensitive << ( in_V_0_sel_wr );
    sensitive << ( in_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_0_load_B);
    sensitive << ( in_V_0_sel_wr );
    sensitive << ( in_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_0_sel);
    sensitive << ( in_V_0_sel_rd );

    SC_METHOD(thread_in_V_0_state_cmp_full);
    sensitive << ( in_V_0_state );

    SC_METHOD(thread_in_V_0_vld_in);
    sensitive << ( in_V_TVALID );

    SC_METHOD(thread_in_V_0_vld_out);
    sensitive << ( in_V_0_state );

    SC_METHOD(thread_in_V_TDATA_blk_n);
    sensitive << ( in_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_V_TREADY);
    sensitive << ( in_V_0_state );

    SC_METHOD(thread_out_V_1_ack_in);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_1_ack_out);
    sensitive << ( out_V_TREADY );

    SC_METHOD(thread_out_V_1_data_out);
    sensitive << ( out_V_1_payload_A );
    sensitive << ( out_V_1_payload_B );
    sensitive << ( out_V_1_sel );

    SC_METHOD(thread_out_V_1_load_A);
    sensitive << ( out_V_1_sel_wr );
    sensitive << ( out_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_1_load_B);
    sensitive << ( out_V_1_sel_wr );
    sensitive << ( out_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_1_sel);
    sensitive << ( out_V_1_sel_rd );

    SC_METHOD(thread_out_V_1_state_cmp_full);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_1_vld_in);
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_out_V_1_vld_out);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_out_V_TDATA);
    sensitive << ( out_V_1_data_out );

    SC_METHOD(thread_out_V_TDATA_blk_n);
    sensitive << ( out_V_1_state );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( user_writing_V_read_reg_184 );

    SC_METHOD(thread_out_V_TVALID);
    sensitive << ( out_V_1_state );

    SC_METHOD(thread_user_writing_V_read_read_fu_56_p2);
    sensitive << ( user_writing_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( in_V_0_vld_out );
    sensitive << ( out_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( user_writing_V_read_read_fu_56_p2 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_state26_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    in_V_0_sel_rd = SC_LOGIC_0;
    in_V_0_sel_wr = SC_LOGIC_0;
    in_V_0_state = "00";
    out_V_1_sel_rd = SC_LOGIC_0;
    out_V_1_sel_wr = SC_LOGIC_0;
    out_V_1_state = "00";
    x1 = "00000000000000000000000000000000";
    x2 = "00000000000000000000000000000000";
    y1 = "00000000000000000000000000000000";
    y2 = "00000000000000000000000000000000";
    ap_CS_fsm = "00000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "biquad_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_V_TDATA, "(port)in_V_TDATA");
    sc_trace(mVcdFile, in_V_TVALID, "(port)in_V_TVALID");
    sc_trace(mVcdFile, in_V_TREADY, "(port)in_V_TREADY");
    sc_trace(mVcdFile, out_V_TDATA, "(port)out_V_TDATA");
    sc_trace(mVcdFile, out_V_TVALID, "(port)out_V_TVALID");
    sc_trace(mVcdFile, out_V_TREADY, "(port)out_V_TREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, in_V_0_data_out, "in_V_0_data_out");
    sc_trace(mVcdFile, in_V_0_vld_in, "in_V_0_vld_in");
    sc_trace(mVcdFile, in_V_0_vld_out, "in_V_0_vld_out");
    sc_trace(mVcdFile, in_V_0_ack_in, "in_V_0_ack_in");
    sc_trace(mVcdFile, in_V_0_ack_out, "in_V_0_ack_out");
    sc_trace(mVcdFile, in_V_0_payload_A, "in_V_0_payload_A");
    sc_trace(mVcdFile, in_V_0_payload_B, "in_V_0_payload_B");
    sc_trace(mVcdFile, in_V_0_sel_rd, "in_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_0_sel_wr, "in_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_0_sel, "in_V_0_sel");
    sc_trace(mVcdFile, in_V_0_load_A, "in_V_0_load_A");
    sc_trace(mVcdFile, in_V_0_load_B, "in_V_0_load_B");
    sc_trace(mVcdFile, in_V_0_state, "in_V_0_state");
    sc_trace(mVcdFile, in_V_0_state_cmp_full, "in_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_V_1_data_out, "out_V_1_data_out");
    sc_trace(mVcdFile, out_V_1_vld_in, "out_V_1_vld_in");
    sc_trace(mVcdFile, out_V_1_vld_out, "out_V_1_vld_out");
    sc_trace(mVcdFile, out_V_1_ack_in, "out_V_1_ack_in");
    sc_trace(mVcdFile, out_V_1_ack_out, "out_V_1_ack_out");
    sc_trace(mVcdFile, out_V_1_payload_A, "out_V_1_payload_A");
    sc_trace(mVcdFile, out_V_1_payload_B, "out_V_1_payload_B");
    sc_trace(mVcdFile, out_V_1_sel_rd, "out_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_1_sel_wr, "out_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_1_sel, "out_V_1_sel");
    sc_trace(mVcdFile, out_V_1_load_A, "out_V_1_load_A");
    sc_trace(mVcdFile, out_V_1_load_B, "out_V_1_load_B");
    sc_trace(mVcdFile, out_V_1_state, "out_V_1_state");
    sc_trace(mVcdFile, out_V_1_state_cmp_full, "out_V_1_state_cmp_full");
    sc_trace(mVcdFile, a1, "a1");
    sc_trace(mVcdFile, a2, "a2");
    sc_trace(mVcdFile, b0, "b0");
    sc_trace(mVcdFile, b1, "b1");
    sc_trace(mVcdFile, b2, "b2");
    sc_trace(mVcdFile, user_writing_V, "user_writing_V");
    sc_trace(mVcdFile, x1, "x1");
    sc_trace(mVcdFile, x2, "x2");
    sc_trace(mVcdFile, y1, "y1");
    sc_trace(mVcdFile, y2, "y2");
    sc_trace(mVcdFile, in_V_TDATA_blk_n, "in_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, out_V_TDATA_blk_n, "out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, user_writing_V_read_reg_184, "user_writing_V_read_reg_184");
    sc_trace(mVcdFile, grp_fu_110_p2, "grp_fu_110_p2");
    sc_trace(mVcdFile, reg_123, "reg_123");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_115_p2, "grp_fu_115_p2");
    sc_trace(mVcdFile, reg_129, "reg_129");
    sc_trace(mVcdFile, grp_fu_105_p2, "grp_fu_105_p2");
    sc_trace(mVcdFile, reg_134, "reg_134");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, user_writing_V_read_read_fu_56_p2, "user_writing_V_read_read_fu_56_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, b2_read_reg_188, "b2_read_reg_188");
    sc_trace(mVcdFile, b1_read_reg_193, "b1_read_reg_193");
    sc_trace(mVcdFile, b0_read_reg_198, "b0_read_reg_198");
    sc_trace(mVcdFile, a2_read_reg_203, "a2_read_reg_203");
    sc_trace(mVcdFile, a1_read_reg_208, "a1_read_reg_208");
    sc_trace(mVcdFile, grp_fu_119_p2, "grp_fu_119_p2");
    sc_trace(mVcdFile, tmp_9_reg_228, "tmp_9_reg_228");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_block_state26_io, "ap_block_state26_io");
    sc_trace(mVcdFile, grp_fu_105_p0, "grp_fu_105_p0");
    sc_trace(mVcdFile, grp_fu_105_p1, "grp_fu_105_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_fu_110_p0, "grp_fu_110_p0");
    sc_trace(mVcdFile, grp_fu_110_p1, "grp_fu_110_p1");
    sc_trace(mVcdFile, grp_fu_115_p0, "grp_fu_115_p0");
    sc_trace(mVcdFile, grp_fu_115_p1, "grp_fu_115_p1");
    sc_trace(mVcdFile, grp_fu_105_opcode, "grp_fu_105_opcode");
    sc_trace(mVcdFile, grp_fu_105_ce, "grp_fu_105_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_110_ce, "grp_fu_110_ce");
    sc_trace(mVcdFile, grp_fu_115_ce, "grp_fu_115_ce");
    sc_trace(mVcdFile, grp_fu_119_ce, "grp_fu_119_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("biquad.hdltvin.dat");
    mHdltvoutHandle.open("biquad.hdltvout.dat");
}

biquad::~biquad() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete biquad_CTRL_BUS_s_axi_U;
    delete biquad_faddfsub_3bkb_U1;
    delete biquad_fmul_32ns_cud_U2;
    delete biquad_fmul_32ns_cud_U3;
    delete biquad_fmul_32ns_cud_U4;
}

void biquad::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void biquad::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_out.read()))) {
            in_V_0_sel_rd =  (sc_logic) (~in_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_in.read()))) {
            in_V_0_sel_wr =  (sc_logic) (~in_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_2)))) {
            in_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_1)))) {
            in_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_ack_out.read()))))) {
            in_V_0_state = ap_const_lv2_3;
        } else {
            in_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_out.read()))) {
            out_V_1_sel_rd =  (sc_logic) (~out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_in.read()))) {
            out_V_1_sel_wr =  (sc_logic) (~out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_1_state.read())))) {
            out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_1_state.read())))) {
            out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_ack_out.read()))))) {
            out_V_1_state = ap_const_lv2_3;
        } else {
            out_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        a1_read_reg_208 = a1.read();
        a2_read_reg_203 = a2.read();
        b0_read_reg_198 = b0.read();
        b1_read_reg_193 = b1.read();
        b2_read_reg_188 = b2.read();
        user_writing_V_read_reg_184 = user_writing_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_load_A.read())) {
        in_V_0_payload_A = in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_load_B.read())) {
        in_V_0_payload_B = in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_load_A.read())) {
        out_V_1_payload_A = grp_fu_105_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_load_B.read())) {
        out_V_1_payload_B = grp_fu_105_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        reg_123 = grp_fu_110_p2.read();
        reg_129 = grp_fu_115_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
  esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1)))) {
        reg_134 = grp_fu_105_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_9_reg_228 = grp_fu_119_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(in_V_0_vld_out.read(), ap_const_logic_1))) {
        x1 = in_V_0_data_out.read();
        x2 = x1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
        y1 = grp_fu_105_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        y2 = y1.read();
    }
}

void biquad::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void biquad::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void biquad::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void biquad::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void biquad::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void biquad::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void biquad::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void biquad::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void biquad::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void biquad::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void biquad::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void biquad::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void biquad::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void biquad::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void biquad::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void biquad::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void biquad::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void biquad::thread_ap_block_state26_io() {
    ap_block_state26_io = (esl_seteq<1,1,1>(ap_const_lv1_0, user_writing_V_read_reg_184.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_in.read()));
}

void biquad::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void biquad::thread_grp_fu_105_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_in.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        grp_fu_105_ce = ap_const_logic_0;
    } else {
        grp_fu_105_ce = ap_const_logic_1;
    }
}

void biquad::thread_grp_fu_105_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        grp_fu_105_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        grp_fu_105_opcode = ap_const_lv2_0;
    } else {
        grp_fu_105_opcode = "XX";
    }
}

void biquad::thread_grp_fu_105_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        grp_fu_105_p0 = reg_134.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_105_p0 = reg_123.read();
    } else {
        grp_fu_105_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void biquad::thread_grp_fu_105_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        grp_fu_105_p1 = reg_123.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_fu_105_p1 = tmp_9_reg_228.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        grp_fu_105_p1 = reg_129.read();
    } else {
        grp_fu_105_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void biquad::thread_grp_fu_110_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(in_V_0_vld_out.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        grp_fu_110_ce = ap_const_logic_1;
    } else {
        grp_fu_110_ce = ap_const_logic_0;
    }
}

void biquad::thread_grp_fu_110_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_110_p0 = y1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_110_p0 = in_V_0_data_out.read();
    } else {
        grp_fu_110_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void biquad::thread_grp_fu_110_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_110_p1 = a1_read_reg_208.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_110_p1 = b0_read_reg_198.read();
    } else {
        grp_fu_110_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void biquad::thread_grp_fu_115_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(in_V_0_vld_out.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        grp_fu_115_ce = ap_const_logic_1;
    } else {
        grp_fu_115_ce = ap_const_logic_0;
    }
}

void biquad::thread_grp_fu_115_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_115_p0 = y2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_115_p0 = x1.read();
    } else {
        grp_fu_115_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void biquad::thread_grp_fu_115_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        grp_fu_115_p1 = a2_read_reg_203.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_115_p1 = b1_read_reg_193.read();
    } else {
        grp_fu_115_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void biquad::thread_grp_fu_119_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(in_V_0_vld_out.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        grp_fu_119_ce = ap_const_logic_1;
    } else {
        grp_fu_119_ce = ap_const_logic_0;
    }
}

void biquad::thread_in_V_0_ack_in() {
    in_V_0_ack_in = in_V_0_state.read()[1];
}

void biquad::thread_in_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(in_V_0_vld_out.read(), ap_const_logic_1))) {
        in_V_0_ack_out = ap_const_logic_1;
    } else {
        in_V_0_ack_out = ap_const_logic_0;
    }
}

void biquad::thread_in_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_0_sel.read())) {
        in_V_0_data_out = in_V_0_payload_B.read();
    } else {
        in_V_0_data_out = in_V_0_payload_A.read();
    }
}

void biquad::thread_in_V_0_load_A() {
    in_V_0_load_A = (in_V_0_state_cmp_full.read() & ~in_V_0_sel_wr.read());
}

void biquad::thread_in_V_0_load_B() {
    in_V_0_load_B = (in_V_0_sel_wr.read() & in_V_0_state_cmp_full.read());
}

void biquad::thread_in_V_0_sel() {
    in_V_0_sel = in_V_0_sel_rd.read();
}

void biquad::thread_in_V_0_state_cmp_full() {
    in_V_0_state_cmp_full =  (sc_logic) ((!in_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_0_state.read() != ap_const_lv2_1))[0];
}

void biquad::thread_in_V_0_vld_in() {
    in_V_0_vld_in = in_V_TVALID.read();
}

void biquad::thread_in_V_0_vld_out() {
    in_V_0_vld_out = in_V_0_state.read()[0];
}

void biquad::thread_in_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_V_TDATA_blk_n = in_V_0_state.read()[0];
    } else {
        in_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void biquad::thread_in_V_TREADY() {
    in_V_TREADY = in_V_0_state.read()[1];
}

void biquad::thread_out_V_1_ack_in() {
    out_V_1_ack_in = out_V_1_state.read()[1];
}

void biquad::thread_out_V_1_ack_out() {
    out_V_1_ack_out = out_V_TREADY.read();
}

void biquad::thread_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_1_sel.read())) {
        out_V_1_data_out = out_V_1_payload_B.read();
    } else {
        out_V_1_data_out = out_V_1_payload_A.read();
    }
}

void biquad::thread_out_V_1_load_A() {
    out_V_1_load_A = (out_V_1_state_cmp_full.read() & ~out_V_1_sel_wr.read());
}

void biquad::thread_out_V_1_load_B() {
    out_V_1_load_B = (out_V_1_sel_wr.read() & out_V_1_state_cmp_full.read());
}

void biquad::thread_out_V_1_sel() {
    out_V_1_sel = out_V_1_sel_rd.read();
}

void biquad::thread_out_V_1_state_cmp_full() {
    out_V_1_state_cmp_full =  (sc_logic) ((!out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_1_state.read() != ap_const_lv2_1))[0];
}

void biquad::thread_out_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
         esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
        out_V_1_vld_in = ap_const_logic_1;
    } else {
        out_V_1_vld_in = ap_const_logic_0;
    }
}

void biquad::thread_out_V_1_vld_out() {
    out_V_1_vld_out = out_V_1_state.read()[0];
}

void biquad::thread_out_V_TDATA() {
    out_V_TDATA = out_V_1_data_out.read();
}

void biquad::thread_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, user_writing_V_read_reg_184.read())))) {
        out_V_TDATA_blk_n = out_V_1_state.read()[1];
    } else {
        out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void biquad::thread_out_V_TVALID() {
    out_V_TVALID = out_V_1_state.read()[0];
}

void biquad::thread_user_writing_V_read_read_fu_56_p2() {
    user_writing_V_read_read_fu_56_p2 = user_writing_V.read();
}

void biquad::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, user_writing_V_read_read_fu_56_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(in_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(out_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state26_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<26>) ("XXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void biquad::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_TDATA\" :  \"" << in_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_TVALID\" :  \"" << in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_V_TREADY\" :  \"" << in_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_TDATA\" :  \"" << out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_V_TVALID\" :  \"" << out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_V_TREADY\" :  \"" << out_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

