// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _biquad_HH_
#define _biquad_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "biquad_faddfsub_3bkb.h"
#include "biquad_fmul_32ns_cud.h"
#include "biquad_CTRL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CTRL_BUS_DATA_WIDTH = 32>
struct biquad : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > in_V_TDATA;
    sc_in< sc_logic > in_V_TVALID;
    sc_out< sc_logic > in_V_TREADY;
    sc_out< sc_lv<32> > out_V_TDATA;
    sc_out< sc_logic > out_V_TVALID;
    sc_in< sc_logic > out_V_TREADY;
    sc_in< sc_logic > s_axi_CTRL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH/8> > s_axi_CTRL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    biquad(sc_module_name name);
    SC_HAS_PROCESS(biquad);

    ~biquad();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    biquad_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>* biquad_CTRL_BUS_s_axi_U;
    biquad_faddfsub_3bkb<1,5,32,32,32>* biquad_faddfsub_3bkb_U1;
    biquad_fmul_32ns_cud<1,4,32,32,32>* biquad_fmul_32ns_cud_U2;
    biquad_fmul_32ns_cud<1,4,32,32,32>* biquad_fmul_32ns_cud_U3;
    biquad_fmul_32ns_cud<1,4,32,32,32>* biquad_fmul_32ns_cud_U4;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > in_V_0_data_out;
    sc_signal< sc_logic > in_V_0_vld_in;
    sc_signal< sc_logic > in_V_0_vld_out;
    sc_signal< sc_logic > in_V_0_ack_in;
    sc_signal< sc_logic > in_V_0_ack_out;
    sc_signal< sc_lv<32> > in_V_0_payload_A;
    sc_signal< sc_lv<32> > in_V_0_payload_B;
    sc_signal< sc_logic > in_V_0_sel_rd;
    sc_signal< sc_logic > in_V_0_sel_wr;
    sc_signal< sc_logic > in_V_0_sel;
    sc_signal< sc_logic > in_V_0_load_A;
    sc_signal< sc_logic > in_V_0_load_B;
    sc_signal< sc_lv<2> > in_V_0_state;
    sc_signal< sc_logic > in_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > out_V_1_data_out;
    sc_signal< sc_logic > out_V_1_vld_in;
    sc_signal< sc_logic > out_V_1_vld_out;
    sc_signal< sc_logic > out_V_1_ack_in;
    sc_signal< sc_logic > out_V_1_ack_out;
    sc_signal< sc_lv<32> > out_V_1_payload_A;
    sc_signal< sc_lv<32> > out_V_1_payload_B;
    sc_signal< sc_logic > out_V_1_sel_rd;
    sc_signal< sc_logic > out_V_1_sel_wr;
    sc_signal< sc_logic > out_V_1_sel;
    sc_signal< sc_logic > out_V_1_load_A;
    sc_signal< sc_logic > out_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_1_state;
    sc_signal< sc_logic > out_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > a1;
    sc_signal< sc_lv<32> > a2;
    sc_signal< sc_lv<32> > b0;
    sc_signal< sc_lv<32> > b1;
    sc_signal< sc_lv<32> > b2;
    sc_signal< sc_lv<1> > user_writing_V;
    sc_signal< sc_lv<32> > x1;
    sc_signal< sc_lv<32> > x2;
    sc_signal< sc_lv<32> > y1;
    sc_signal< sc_lv<32> > y2;
    sc_signal< sc_logic > in_V_TDATA_blk_n;
    sc_signal< sc_lv<26> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > out_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_logic > ap_CS_fsm_state26;
    sc_signal< sc_lv<1> > user_writing_V_read_reg_184;
    sc_signal< sc_lv<32> > grp_fu_110_p2;
    sc_signal< sc_lv<32> > reg_123;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<32> > grp_fu_115_p2;
    sc_signal< sc_lv<32> > reg_129;
    sc_signal< sc_lv<32> > grp_fu_105_p2;
    sc_signal< sc_lv<32> > reg_134;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_lv<1> > user_writing_V_read_read_fu_56_p2;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > b2_read_reg_188;
    sc_signal< sc_lv<32> > b1_read_reg_193;
    sc_signal< sc_lv<32> > b0_read_reg_198;
    sc_signal< sc_lv<32> > a2_read_reg_203;
    sc_signal< sc_lv<32> > a1_read_reg_208;
    sc_signal< sc_lv<32> > grp_fu_119_p2;
    sc_signal< sc_lv<32> > tmp_9_reg_228;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< bool > ap_block_state26_io;
    sc_signal< sc_lv<32> > grp_fu_105_p0;
    sc_signal< sc_lv<32> > grp_fu_105_p1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<32> > grp_fu_110_p0;
    sc_signal< sc_lv<32> > grp_fu_110_p1;
    sc_signal< sc_lv<32> > grp_fu_115_p0;
    sc_signal< sc_lv<32> > grp_fu_115_p1;
    sc_signal< sc_lv<2> > grp_fu_105_opcode;
    sc_signal< sc_logic > grp_fu_105_ce;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > grp_fu_110_ce;
    sc_signal< sc_logic > grp_fu_115_ce;
    sc_signal< sc_logic > grp_fu_119_ce;
    sc_signal< sc_lv<26> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<26> ap_ST_fsm_state1;
    static const sc_lv<26> ap_ST_fsm_state2;
    static const sc_lv<26> ap_ST_fsm_state3;
    static const sc_lv<26> ap_ST_fsm_state4;
    static const sc_lv<26> ap_ST_fsm_state5;
    static const sc_lv<26> ap_ST_fsm_state6;
    static const sc_lv<26> ap_ST_fsm_state7;
    static const sc_lv<26> ap_ST_fsm_state8;
    static const sc_lv<26> ap_ST_fsm_state9;
    static const sc_lv<26> ap_ST_fsm_state10;
    static const sc_lv<26> ap_ST_fsm_state11;
    static const sc_lv<26> ap_ST_fsm_state12;
    static const sc_lv<26> ap_ST_fsm_state13;
    static const sc_lv<26> ap_ST_fsm_state14;
    static const sc_lv<26> ap_ST_fsm_state15;
    static const sc_lv<26> ap_ST_fsm_state16;
    static const sc_lv<26> ap_ST_fsm_state17;
    static const sc_lv<26> ap_ST_fsm_state18;
    static const sc_lv<26> ap_ST_fsm_state19;
    static const sc_lv<26> ap_ST_fsm_state20;
    static const sc_lv<26> ap_ST_fsm_state21;
    static const sc_lv<26> ap_ST_fsm_state22;
    static const sc_lv<26> ap_ST_fsm_state23;
    static const sc_lv<26> ap_ST_fsm_state24;
    static const sc_lv<26> ap_ST_fsm_state25;
    static const sc_lv<26> ap_ST_fsm_state26;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_19;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state26();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state26_io();
    void thread_ap_rst_n_inv();
    void thread_grp_fu_105_ce();
    void thread_grp_fu_105_opcode();
    void thread_grp_fu_105_p0();
    void thread_grp_fu_105_p1();
    void thread_grp_fu_110_ce();
    void thread_grp_fu_110_p0();
    void thread_grp_fu_110_p1();
    void thread_grp_fu_115_ce();
    void thread_grp_fu_115_p0();
    void thread_grp_fu_115_p1();
    void thread_grp_fu_119_ce();
    void thread_in_V_0_ack_in();
    void thread_in_V_0_ack_out();
    void thread_in_V_0_data_out();
    void thread_in_V_0_load_A();
    void thread_in_V_0_load_B();
    void thread_in_V_0_sel();
    void thread_in_V_0_state_cmp_full();
    void thread_in_V_0_vld_in();
    void thread_in_V_0_vld_out();
    void thread_in_V_TDATA_blk_n();
    void thread_in_V_TREADY();
    void thread_out_V_1_ack_in();
    void thread_out_V_1_ack_out();
    void thread_out_V_1_data_out();
    void thread_out_V_1_load_A();
    void thread_out_V_1_load_B();
    void thread_out_V_1_sel();
    void thread_out_V_1_state_cmp_full();
    void thread_out_V_1_vld_in();
    void thread_out_V_1_vld_out();
    void thread_out_V_TDATA();
    void thread_out_V_TDATA_blk_n();
    void thread_out_V_TVALID();
    void thread_user_writing_V_read_read_fu_56_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
