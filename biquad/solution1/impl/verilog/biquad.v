// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="biquad,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=11,HLS_SYN_FF=1440,HLS_SYN_LUT=2029}" *)

module biquad (
        ap_clk,
        ap_rst_n,
        in_V_TDATA,
        in_V_TVALID,
        in_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_V_TDATA;
input   in_V_TVALID;
output   in_V_TREADY;
output  [31:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] in_V_0_data_out;
wire    in_V_0_vld_in;
wire    in_V_0_vld_out;
wire    in_V_0_ack_in;
reg    in_V_0_ack_out;
reg   [31:0] in_V_0_payload_A;
reg   [31:0] in_V_0_payload_B;
reg    in_V_0_sel_rd;
reg    in_V_0_sel_wr;
wire    in_V_0_sel;
wire    in_V_0_load_A;
wire    in_V_0_load_B;
reg   [1:0] in_V_0_state;
wire    in_V_0_state_cmp_full;
reg   [31:0] out_V_1_data_out;
reg    out_V_1_vld_in;
wire    out_V_1_vld_out;
wire    out_V_1_ack_in;
wire    out_V_1_ack_out;
reg   [31:0] out_V_1_payload_A;
reg   [31:0] out_V_1_payload_B;
reg    out_V_1_sel_rd;
reg    out_V_1_sel_wr;
wire    out_V_1_sel;
wire    out_V_1_load_A;
wire    out_V_1_load_B;
reg   [1:0] out_V_1_state;
wire    out_V_1_state_cmp_full;
wire   [31:0] a1;
wire   [31:0] a2;
wire   [31:0] b0;
wire   [31:0] b1;
wire   [31:0] b2;
wire   [0:0] user_writing_V;
reg   [31:0] x1;
reg   [31:0] x2;
reg   [31:0] y1;
reg   [31:0] y2;
reg    in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
reg   [0:0] user_writing_V_read_reg_184;
wire   [31:0] grp_fu_110_p2;
reg   [31:0] reg_123;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_115_p2;
reg   [31:0] reg_129;
wire   [31:0] grp_fu_105_p2;
reg   [31:0] reg_134;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state20;
wire   [0:0] user_writing_V_read_read_fu_56_p2;
wire    ap_CS_fsm_state1;
reg   [31:0] b2_read_reg_188;
reg   [31:0] b1_read_reg_193;
reg   [31:0] b0_read_reg_198;
reg   [31:0] a2_read_reg_203;
reg   [31:0] a1_read_reg_208;
wire   [31:0] grp_fu_119_p2;
reg   [31:0] tmp_9_reg_228;
wire    ap_CS_fsm_state12;
reg    ap_block_state26_io;
reg   [31:0] grp_fu_105_p0;
reg   [31:0] grp_fu_105_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
reg   [31:0] grp_fu_110_p0;
reg   [31:0] grp_fu_110_p1;
reg   [31:0] grp_fu_115_p0;
reg   [31:0] grp_fu_115_p1;
reg   [1:0] grp_fu_105_opcode;
reg    grp_fu_105_ce;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_fu_110_ce;
reg    grp_fu_115_ce;
reg    grp_fu_119_ce;
reg   [25:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 in_V_0_sel_rd = 1'b0;
#0 in_V_0_sel_wr = 1'b0;
#0 in_V_0_state = 2'd0;
#0 out_V_1_sel_rd = 1'b0;
#0 out_V_1_sel_wr = 1'b0;
#0 out_V_1_state = 2'd0;
#0 x1 = 32'd0;
#0 x2 = 32'd0;
#0 y1 = 32'd0;
#0 y2 = 32'd0;
#0 ap_CS_fsm = 26'd1;
end

biquad_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
biquad_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a1(a1),
    .a2(a2),
    .b0(b0),
    .b1(b1),
    .b2(b2),
    .user_writing_V(user_writing_V)
);

biquad_faddfsub_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
biquad_faddfsub_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_105_p0),
    .din1(grp_fu_105_p1),
    .opcode(grp_fu_105_opcode),
    .ce(grp_fu_105_ce),
    .dout(grp_fu_105_p2)
);

biquad_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
biquad_fmul_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_110_p0),
    .din1(grp_fu_110_p1),
    .ce(grp_fu_110_ce),
    .dout(grp_fu_110_p2)
);

biquad_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
biquad_fmul_32ns_cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_115_p0),
    .din1(grp_fu_115_p1),
    .ce(grp_fu_115_ce),
    .dout(grp_fu_115_p2)
);

biquad_fmul_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
biquad_fmul_32ns_cud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x2),
    .din1(b2_read_reg_188),
    .ce(grp_fu_119_ce),
    .dout(grp_fu_119_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in_V_0_ack_out) & (1'b1 == in_V_0_vld_out))) begin
            in_V_0_sel_rd <= ~in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in_V_0_vld_in) & (1'b1 == in_V_0_ack_in))) begin
            in_V_0_sel_wr <= ~in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in_V_0_vld_in) & (1'b1 == in_V_0_ack_out) & (in_V_0_state == 2'd3)) | ((1'b0 == in_V_0_vld_in) & (in_V_0_state == 2'd2)))) begin
            in_V_0_state <= 2'd2;
        end else if ((((1'b1 == in_V_0_vld_in) & (1'b0 == in_V_0_ack_out) & (in_V_0_state == 2'd3)) | ((1'b0 == in_V_0_ack_out) & (in_V_0_state == 2'd1)))) begin
            in_V_0_state <= 2'd1;
        end else if ((((1'b1 == in_V_0_vld_in) & (in_V_0_state == 2'd2)) | ((1'b1 == in_V_0_ack_out) & (in_V_0_state == 2'd1)) | ((in_V_0_state == 2'd3) & ~((1'b1 == in_V_0_vld_in) & (1'b0 == in_V_0_ack_out)) & ~((1'b0 == in_V_0_vld_in) & (1'b1 == in_V_0_ack_out))))) begin
            in_V_0_state <= 2'd3;
        end else begin
            in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_ack_out) & (1'b1 == out_V_1_vld_out))) begin
            out_V_1_sel_rd <= ~out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_in))) begin
            out_V_1_sel_wr <= ~out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out) & (2'd3 == out_V_1_state)) | ((1'b0 == out_V_1_vld_in) & (2'd2 == out_V_1_state)))) begin
            out_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out) & (2'd3 == out_V_1_state)) | ((1'b0 == out_V_1_ack_out) & (2'd1 == out_V_1_state)))) begin
            out_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_V_1_vld_in) & (2'd2 == out_V_1_state)) | ((1'b1 == out_V_1_ack_out) & (2'd1 == out_V_1_state)) | ((2'd3 == out_V_1_state) & ~((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out)) & ~((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out))))) begin
            out_V_1_state <= 2'd3;
        end else begin
            out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        a1_read_reg_208 <= a1;
        a2_read_reg_203 <= a2;
        b0_read_reg_198 <= b0;
        b1_read_reg_193 <= b1;
        b2_read_reg_188 <= b2;
        user_writing_V_read_reg_184 <= user_writing_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_V_0_load_A)) begin
        in_V_0_payload_A <= in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_V_0_load_B)) begin
        in_V_0_payload_B <= in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_A)) begin
        out_V_1_payload_A <= grp_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_B)) begin
        out_V_1_payload_B <= grp_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_123 <= grp_fu_110_p2;
        reg_129 <= grp_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state25) & (out_V_1_ack_in == 1'b1)))) begin
        reg_134 <= grp_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_9_reg_228 <= grp_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_V_0_vld_out == 1'b1))) begin
        x1 <= in_V_0_data_out;
        x2 <= x1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (out_V_1_ack_in == 1'b1))) begin
        y1 <= grp_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        y2 <= y1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state1) | ((1'b1 == ap_CS_fsm_state25) & (1'b0 == out_V_1_ack_in)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_105_ce = 1'b0;
    end else begin
        grp_fu_105_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_105_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_105_opcode = 2'd0;
    end else begin
        grp_fu_105_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_105_p0 = reg_134;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_105_p0 = reg_123;
    end else begin
        grp_fu_105_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_105_p1 = reg_123;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_105_p1 = tmp_9_reg_228;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_105_p1 = reg_129;
    end else begin
        grp_fu_105_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state2) & (in_V_0_vld_out == 1'b1)) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_110_ce = 1'b1;
    end else begin
        grp_fu_110_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_110_p0 = y1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_110_p0 = in_V_0_data_out;
    end else begin
        grp_fu_110_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_110_p1 = a1_read_reg_208;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_110_p1 = b0_read_reg_198;
    end else begin
        grp_fu_110_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state2) & (in_V_0_vld_out == 1'b1)) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_115_ce = 1'b1;
    end else begin
        grp_fu_115_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_115_p0 = y2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_115_p0 = x1;
    end else begin
        grp_fu_115_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_115_p1 = a2_read_reg_203;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_115_p1 = b1_read_reg_193;
    end else begin
        grp_fu_115_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state2) & (in_V_0_vld_out == 1'b1)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_119_ce = 1'b1;
    end else begin
        grp_fu_119_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_V_0_vld_out == 1'b1))) begin
        in_V_0_ack_out = 1'b1;
    end else begin
        in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in_V_0_sel)) begin
        in_V_0_data_out = in_V_0_payload_B;
    end else begin
        in_V_0_data_out = in_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_V_TDATA_blk_n = in_V_0_state[1'd0];
    end else begin
        in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out_V_1_sel)) begin
        out_V_1_data_out = out_V_1_payload_B;
    end else begin
        out_V_1_data_out = out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) & (out_V_1_ack_in == 1'b1))) begin
        out_V_1_vld_in = 1'b1;
    end else begin
        out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state26) & (1'd0 == user_writing_V_read_reg_184)))) begin
        out_V_TDATA_blk_n = out_V_1_state[1'd1];
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'd1 == user_writing_V_read_read_fu_56_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (in_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & ~((1'b0 == out_V_1_ack_in) | (1'b1 == ap_block_state26_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state26_io = ((1'd0 == user_writing_V_read_reg_184) & (1'b0 == out_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign in_V_0_ack_in = in_V_0_state[1'd1];

assign in_V_0_load_A = (in_V_0_state_cmp_full & ~in_V_0_sel_wr);

assign in_V_0_load_B = (in_V_0_sel_wr & in_V_0_state_cmp_full);

assign in_V_0_sel = in_V_0_sel_rd;

assign in_V_0_state_cmp_full = ((in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_0_vld_in = in_V_TVALID;

assign in_V_0_vld_out = in_V_0_state[1'd0];

assign in_V_TREADY = in_V_0_state[1'd1];

assign out_V_1_ack_in = out_V_1_state[1'd1];

assign out_V_1_ack_out = out_V_TREADY;

assign out_V_1_load_A = (out_V_1_state_cmp_full & ~out_V_1_sel_wr);

assign out_V_1_load_B = (out_V_1_sel_wr & out_V_1_state_cmp_full);

assign out_V_1_sel = out_V_1_sel_rd;

assign out_V_1_state_cmp_full = ((out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_1_vld_out = out_V_1_state[1'd0];

assign out_V_TDATA = out_V_1_data_out;

assign out_V_TVALID = out_V_1_state[1'd0];

assign user_writing_V_read_read_fu_56_p2 = user_writing_V;

endmodule //biquad
